export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../projects/angular-wrapper/src/lib/types.ts"],"names":[],"mappings":"","sourcesContent":["\n\n/* Auto Generated Below */\n/* eslint-disable @typescript-eslint/quotes */\nexport type Booleanish = boolean | \"true\" | \"false\";\nexport type AriaAttributes = {\n\t/** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n\t\"aria-activedescendant\"?: string | undefined;\n\t/** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n\t\"aria-atomic\"?: Booleanish | undefined;\n\t/**\n\t * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n\t * presented if they are made.\n\t */\n\t\"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\" | undefined;\n\t/** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n\t/**\n\t * Defines a string value that labels the current element, which is intended to be converted into Braille.\n\t * @see aria-label.\n\t */\n\t\"aria-braillelabel\"?: string | undefined;\n\t/**\n\t * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n\t * @see aria-roledescription.\n\t */\n\t\"aria-brailleroledescription\"?: string | undefined;\n\t\"aria-busy\"?: Booleanish | undefined;\n\t/**\n\t * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n\t * @see aria-pressed @see aria-selected.\n\t */\n\t\"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n\t/**\n\t * Defines the total number of columns in a table, grid, or treegrid.\n\t * @see aria-colindex.\n\t */\n\t\"aria-colcount\"?: number | undefined;\n\t/**\n\t * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n\t * @see aria-colcount @see aria-colspan.\n\t */\n\t\"aria-colindex\"?: number | undefined;\n\t/**\n\t * Defines a human readable text alternative of aria-colindex.\n\t * @see aria-rowindextext.\n\t */\n\t\"aria-colindextext\"?: string | undefined;\n\t/**\n\t * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n\t * @see aria-colindex @see aria-rowspan.\n\t */\n\t\"aria-colspan\"?: number | undefined;\n\t/**\n\t * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n\t * @see aria-owns.\n\t */\n\t\"aria-controls\"?: string | undefined;\n\t/** Indicates the element that represents the current item within a container or set of related elements. */\n\t\"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined;\n\t/**\n\t * Identifies the element (or elements) that describes the object.\n\t * @see aria-labelledby\n\t */\n\t\"aria-describedby\"?: string | undefined;\n\t/**\n\t * Defines a string value that describes or annotates the current element.\n\t * @see related aria-describedby.\n\t */\n\t\"aria-description\"?: string | undefined;\n\t/**\n\t * Identifies the element that provides a detailed, extended description for the object.\n\t * @see aria-describedby.\n\t */\n\t\"aria-details\"?: string | undefined;\n\t/**\n\t * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n\t * @see aria-hidden @see aria-readonly.\n\t */\n\t\"aria-disabled\"?: Booleanish | undefined;\n\t/**\n\t * Indicates what functions can be performed when a dragged object is released on the drop target.\n\t * @deprecated in ARIA 1.1\n\t */\n\t\"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\" | undefined;\n\t/**\n\t * Identifies the element that provides an error message for the object.\n\t * @see aria-invalid @see aria-describedby.\n\t */\n\t\"aria-errormessage\"?: string | undefined;\n\t/** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n\t\"aria-expanded\"?: Booleanish | undefined;\n\t/**\n\t * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n\t * allows assistive technology to override the general default of reading in document source order.\n\t */\n\t\"aria-flowto\"?: string | undefined;\n\t/**\n\t * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n\t * @deprecated in ARIA 1.1\n\t */\n\t\"aria-grabbed\"?: Booleanish | undefined;\n\t/** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n\t\"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\" | undefined;\n\t/**\n\t * Indicates whether the element is exposed to an accessibility API.\n\t * @see aria-disabled.\n\t */\n\t\"aria-hidden\"?: Booleanish | undefined;\n\t/**\n\t * Indicates the entered value does not conform to the format expected by the application.\n\t * @see aria-errormessage.\n\t */\n\t\"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\" | undefined;\n\t/** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n\t\"aria-keyshortcuts\"?: string | undefined;\n\t/**\n\t * Defines a string value that labels the current element.\n\t * @see aria-labelledby.\n\t */\n\t\"aria-label\"?: string | undefined;\n\t/**\n\t * Identifies the element (or elements) that labels the current element.\n\t * @see aria-describedby.\n\t */\n\t\"aria-labelledby\"?: string | undefined;\n\t/** Defines the hierarchical level of an element within a structure. */\n\t\"aria-level\"?: number | undefined;\n\t/** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n\t\"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined;\n\t/** Indicates whether an element is modal when displayed. */\n\t\"aria-modal\"?: Booleanish | undefined;\n\t/** Indicates whether a text box accepts multiple lines of input or only a single line. */\n\t\"aria-multiline\"?: Booleanish | undefined;\n\t/** Indicates that the user may select more than one item from the current selectable descendants. */\n\t\"aria-multiselectable\"?: Booleanish | undefined;\n\t/** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n\t\"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined;\n\t/**\n\t * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n\t * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n\t * @see aria-controls.\n\t */\n\t\"aria-owns\"?: string | undefined;\n\t/**\n\t * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n\t * A hint could be a sample value or a brief description of the expected format.\n\t */\n\t\"aria-placeholder\"?: string | undefined;\n\t/**\n\t * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n\t * @see aria-setsize.\n\t */\n\t\"aria-posinset\"?: number | undefined;\n\t/**\n\t * Indicates the current \"pressed\" state of toggle buttons.\n\t * @see aria-checked @see aria-selected.\n\t */\n\t\"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n\t/**\n\t * Indicates that the element is not editable, but is otherwise operable.\n\t * @see aria-disabled.\n\t */\n\t\"aria-readonly\"?: Booleanish | undefined;\n\t/**\n\t * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n\t * @see aria-atomic.\n\t */\n\t\"aria-relevant\"?: \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text\" | \"text additions\" | \"text removals\" | undefined;\n\t/** Indicates that user input is required on the element before a form may be submitted. */\n\t\"aria-required\"?: Booleanish | undefined;\n\t/** Defines a human-readable, author-localized description for the role of an element. */\n\t\"aria-roledescription\"?: string | undefined;\n\t/**\n\t * Defines the total number of rows in a table, grid, or treegrid.\n\t * @see aria-rowindex.\n\t */\n\t\"aria-rowcount\"?: number | undefined;\n\t/**\n\t * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n\t * @see aria-rowcount @see aria-rowspan.\n\t */\n\t\"aria-rowindex\"?: number | undefined;\n\t/**\n\t * Defines a human readable text alternative of aria-rowindex.\n\t * @see aria-colindextext.\n\t */\n\t\"aria-rowindextext\"?: string | undefined;\n\t/**\n\t * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n\t * @see aria-rowindex @see aria-colspan.\n\t */\n\t\"aria-rowspan\"?: number | undefined;\n\t/**\n\t * Indicates the current \"selected\" state of various widgets.\n\t * @see aria-checked @see aria-pressed.\n\t */\n\t\"aria-selected\"?: Booleanish | undefined;\n\t/**\n\t * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n\t * @see aria-posinset.\n\t */\n\t\"aria-setsize\"?: number | undefined;\n\t/** Indicates if items in a table or grid are sorted in ascending or descending order. */\n\t\"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined;\n\t/** Defines the maximum allowed value for a range widget. */\n\t\"aria-valuemax\"?: number | undefined;\n\t/** Defines the minimum allowed value for a range widget. */\n\t\"aria-valuemin\"?: number | undefined;\n\t/**\n\t * Defines the current value for a range widget.\n\t * @see aria-valuetext.\n\t */\n\t\"aria-valuenow\"?: number | undefined;\n\t/** Defines the human readable text alternative of aria-valuenow for a range widget. */\n\t\"aria-valuetext\"?: string | undefined;\n\t/** All the WAI-ARIA 1.1 role attribute values from https://w3.org/TR/wai-aria-1.1/#role_definitions */\n\trole?: AriaRole;\n};\nexport type AriaRole = \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\";\ndeclare const ICON_NAMES: readonly [\n\t\"360\",\n\t\"accessibility\",\n\t\"active-cabin-ventilation\",\n\t\"add\",\n\t\"adjust\",\n\t\"arrow-double-down\",\n\t\"arrow-double-left\",\n\t\"arrow-double-right\",\n\t\"arrow-double-up\",\n\t\"arrow-down\",\n\t\"arrow-first\",\n\t\"arrow-head-down\",\n\t\"arrow-head-left\",\n\t\"arrow-head-right\",\n\t\"arrow-head-up\",\n\t\"arrow-last\",\n\t\"arrow-left\",\n\t\"arrow-right\",\n\t\"arrow-up\",\n\t\"augmented-reality\",\n\t\"battery-empty\",\n\t\"battery-empty-co2\",\n\t\"battery-full\",\n\t\"bell\",\n\t\"bookmark\",\n\t\"bookmark-filled\",\n\t\"broadcast\",\n\t\"calculator\",\n\t\"calendar\",\n\t\"camera\",\n\t\"car\",\n\t\"car-battery\",\n\t\"card\",\n\t\"charging-active\",\n\t\"charging-state\",\n\t\"charging-station\",\n\t\"chart\",\n\t\"chat\",\n\t\"check\",\n\t\"city\",\n\t\"climate\",\n\t\"climate-control\",\n\t\"clock\",\n\t\"close\",\n\t\"closed-caption\",\n\t\"co2-class\",\n\t\"co2-emission\",\n\t\"compare\",\n\t\"configurate\",\n\t\"copy\",\n\t\"country-road\",\n\t\"cubic-capacity\",\n\t\"delete\",\n\t\"disable\",\n\t\"document\",\n\t\"download\",\n\t\"duration\",\n\t\"edit\",\n\t\"email\",\n\t\"error-filled\",\n\t\"exclamation\",\n\t\"external\",\n\t\"filter\",\n\t\"fingerprint\",\n\t\"flash\",\n\t\"fuel-station\",\n\t\"garage\",\n\t\"gift\",\n\t\"globe\",\n\t\"grid\",\n\t\"heart\",\n\t\"heart-filled\",\n\t\"highway\",\n\t\"home\",\n\t\"horn\",\n\t\"image\",\n\t\"increase\",\n\t\"information\",\n\t\"information-filled\",\n\t\"key\",\n\t\"leaf\",\n\t\"leather\",\n\t\"light\",\n\t\"list\",\n\t\"locate\",\n\t\"lock\",\n\t\"lock-open\",\n\t\"logo-apple-podcast\",\n\t\"logo-baidu\",\n\t\"logo-delicious\",\n\t\"logo-digg\",\n\t\"logo-facebook\",\n\t\"logo-foursquare\",\n\t\"logo-gmail\",\n\t\"logo-google\",\n\t\"logo-hatena\",\n\t\"logo-instagram\",\n\t\"logo-kaixin\",\n\t\"logo-kakaotalk\",\n\t\"logo-linkedin\",\n\t\"logo-naver\",\n\t\"logo-pinterest\",\n\t\"logo-qq\",\n\t\"logo-qq-share\",\n\t\"logo-reddit\",\n\t\"logo-skyrock\",\n\t\"logo-sohu\",\n\t\"logo-spotify\",\n\t\"logo-tecent\",\n\t\"logo-telegram\",\n\t\"logo-tiktok\",\n\t\"logo-tumblr\",\n\t\"logo-twitter\",\n\t\"logo-viber\",\n\t\"logo-vk\",\n\t\"logo-wechat\",\n\t\"logo-weibo\",\n\t\"logo-whatsapp\",\n\t\"logo-x\",\n\t\"logo-xing\",\n\t\"logo-yahoo\",\n\t\"logo-youku\",\n\t\"logo-youtube\",\n\t\"logout\",\n\t\"map\",\n\t\"menu-dots-horizontal\",\n\t\"menu-dots-vertical\",\n\t\"menu-lines\",\n\t\"minus\",\n\t\"mobile\",\n\t\"moon\",\n\t\"oil-can\",\n\t\"parking-brake\",\n\t\"parking-light\",\n\t\"pause\",\n\t\"phone\",\n\t\"pin\",\n\t\"pin-filled\",\n\t\"play\",\n\t\"plug\",\n\t\"plus\",\n\t\"preheating\",\n\t\"printer\",\n\t\"purchase\",\n\t\"push-pin\",\n\t\"push-pin-off\",\n\t\"qr\",\n\t\"question\",\n\t\"racing-flag\",\n\t\"refresh\",\n\t\"replay\",\n\t\"reset\",\n\t\"roof-closed\",\n\t\"roof-open\",\n\t\"route\",\n\t\"rss\",\n\t\"save\",\n\t\"screen\",\n\t\"search\",\n\t\"send\",\n\t\"share\",\n\t\"shopping-bag\",\n\t\"shopping-bag-filled\",\n\t\"shopping-cart\",\n\t\"shopping-cart-filled\",\n\t\"sidelights\",\n\t\"snowflake\",\n\t\"sort\",\n\t\"stack\",\n\t\"star\",\n\t\"star-filled\",\n\t\"steering-wheel\",\n\t\"stopwatch\",\n\t\"subtract\",\n\t\"success\",\n\t\"success-filled\",\n\t\"sun\",\n\t\"switch\",\n\t\"tablet\",\n\t\"tachometer\",\n\t\"tire\",\n\t\"truck\",\n\t\"upload\",\n\t\"user\",\n\t\"user-filled\",\n\t\"user-group\",\n\t\"user-manual\",\n\t\"video\",\n\t\"view\",\n\t\"view-off\",\n\t\"volume-off\",\n\t\"volume-up\",\n\t\"warning\",\n\t\"warning-filled\",\n\t\"weight\",\n\t\"wifi\",\n\t\"work\",\n\t\"wrench\",\n\t\"wrenches\",\n\t\"zoom-in\",\n\t\"zoom-out\"\n];\nexport type IconName = typeof ICON_NAMES[number];\ndeclare const FORM_STATES: readonly [\n\t\"none\",\n\t\"error\",\n\t\"success\"\n];\nexport type FormState = typeof FORM_STATES[number];\ndeclare const BUTTON_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\",\n\t\"aria-expanded\",\n\t\"aria-pressed\",\n\t\"aria-haspopup\"\n];\nexport type ButtonAriaAttribute = typeof BUTTON_ARIA_ATTRIBUTES[number];\ndeclare const LINK_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\",\n\t\"aria-current\"\n];\nexport type LinkAriaAttribute = (typeof LINK_ARIA_ATTRIBUTES)[number];\ndeclare const breakpoints: readonly [\n\t\"base\",\n\t\"xs\",\n\t\"s\",\n\t\"m\",\n\t\"l\",\n\t\"xl\",\n\t\"xxl\"\n];\nexport type Breakpoint = (typeof breakpoints)[number];\nexport type BreakpointValues<T> = {\n\t[key in Breakpoint]?: T;\n} & {\n\tbase: T;\n};\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T> | string;\ndeclare const LINK_TARGETS: readonly [\n\t\"_self\",\n\t\"_blank\",\n\t\"_parent\",\n\t\"_top\"\n];\nexport type LinkTarget = (typeof LINK_TARGETS)[number] | string;\ndeclare const THEMES: readonly [\n\t\"light\",\n\t\"dark\",\n\t\"auto\"\n];\nexport type Theme = (typeof THEMES)[number];\ndeclare const TILE_ASPECT_RATIOS: readonly [\n\t\"1:1\",\n\t\"4:3\",\n\t\"3:4\",\n\t\"16:9\",\n\t\"9:16\"\n];\nexport type TileAspectRatio = (typeof TILE_ASPECT_RATIOS)[number];\ndeclare const TILE_SIZES: readonly [\n\t\"default\",\n\t\"inherit\"\n];\nexport type TileSize = (typeof TILE_SIZES)[number];\ndeclare const TILE_WEIGHTS: readonly [\n\t\"regular\",\n\t\"semi-bold\"\n];\nexport type TileWeight = (typeof TILE_WEIGHTS)[number];\nexport type TileBackground = (typeof THEMES)[number];\ndeclare const TILE_ALIGNS: readonly [\n\t\"top\",\n\t\"bottom\"\n];\nexport type TileAlign = (typeof TILE_ALIGNS)[number];\ndeclare const SCROLLER_ARIA_ATTRIBUTES: readonly [\n\t\"role\"\n];\nexport type ScrollerAriaAttribute = (typeof SCROLLER_ARIA_ATTRIBUTES)[number];\ndeclare const GRADIENT_COLOR_SCHEMES: readonly [\n\t\"default\",\n\t\"surface\"\n];\n/** @deprecated */\nexport type ScrollerGradientColorScheme = (typeof GRADIENT_COLOR_SCHEMES)[number];\ndeclare const GRADIENT_COLORS: readonly [\n\t\"background-base\",\n\t\"background-surface\"\n];\nexport type ScrollerGradientColor = (typeof GRADIENT_COLORS)[number];\nexport type ScrollerScrollToPosition = {\n\tscrollPosition: number;\n\tisSmooth?: boolean;\n} | string;\ndeclare const SCROLL_INDICATOR_POSITIONS: readonly [\n\t\"top\",\n\t\"center\"\n];\n/** @deprecated */\nexport type ScrollerScrollIndicatorPosition = (typeof SCROLL_INDICATOR_POSITIONS)[number];\nexport type ScrollerAlignScrollIndicator = ScrollerScrollIndicatorPosition;\ndeclare const SELECT_DROPDOWN_DIRECTIONS: readonly [\n\t\"down\",\n\t\"up\",\n\t\"auto\"\n];\nexport type SelectComponentsDropdownDirection = (typeof SELECT_DROPDOWN_DIRECTIONS)[number];\ndeclare const HEADING_SIZES: readonly [\n\t\"small\",\n\t\"medium\",\n\t\"large\",\n\t\"x-large\",\n\t\"xx-large\",\n\t\"inherit\"\n];\nexport type HeadingSize = (typeof HEADING_SIZES)[number];\ndeclare const TEXT_SIZES: readonly [\n\t\"xx-small\",\n\t\"x-small\",\n\t\"small\",\n\t\"medium\",\n\t\"large\",\n\t\"x-large\",\n\t\"inherit\"\n];\nexport type TextSize = (typeof TEXT_SIZES)[number];\ndeclare const TYPOGRAPHY_ALIGNS: readonly [\n\t\"start\",\n\t\"center\",\n\t\"end\",\n\t\"left\",\n\t\"right\"\n];\nexport type TypographyAlign = (typeof TYPOGRAPHY_ALIGNS)[number];\ndeclare const TYPOGRAPHY_TEXT_COLORS: readonly [\n\t\"primary\",\n\t\"contrast-low\",\n\t\"contrast-medium\",\n\t\"contrast-high\",\n\t\"notification-success\",\n\t\"notification-warning\",\n\t\"notification-error\",\n\t\"notification-info\",\n\t\"inherit\",\n\t\"brand\",\n\t\"default\",\n\t\"neutral-contrast-low\",\n\t\"neutral-contrast-medium\",\n\t\"neutral-contrast-high\",\n\t\"notification-neutral\"\n];\nexport type TypographyTextColor = (typeof TYPOGRAPHY_TEXT_COLORS)[number];\ndeclare const TYPOGRAPHY_TEXT_WEIGHTS: readonly [\n\t\"regular\",\n\t\"semi-bold\",\n\t\"bold\",\n\t\"thin\",\n\t\"semibold\"\n];\nexport type TypographyTextWeight = (typeof TYPOGRAPHY_TEXT_WEIGHTS)[number];\ndeclare const ALIGN_LABELS: readonly [\n\t\"start\",\n\t\"end\",\n\t\"left\",\n\t\"right\"\n];\nexport type AlignLabel = (typeof ALIGN_LABELS)[number];\ndeclare const BUTTON_TYPES: readonly [\n\t\"button\",\n\t\"submit\",\n\t\"reset\"\n];\nexport type ButtonType = typeof BUTTON_TYPES[number];\ndeclare const HEADING_TAGS: readonly [\n\t\"h1\",\n\t\"h2\",\n\t\"h3\",\n\t\"h4\",\n\t\"h5\",\n\t\"h6\"\n];\nexport type HeadingTag = typeof HEADING_TAGS[number];\ndeclare const LINK_BUTTON_VARIANTS: readonly [\n\t\"primary\",\n\t\"secondary\",\n\t\"tertiary\"\n];\nexport type LinkButtonVariant = typeof LINK_BUTTON_VARIANTS[number];\nexport type LinkButtonIconName = IconName | \"none\";\nexport type ButtonVariant = LinkButtonVariant;\nexport type LinkVariant = LinkButtonVariant;\n// TODO: Share type across repo\nexport type PorscheDesignSystem = {\n\t[key: `${number}.${number}.${number}${`-rc.${number}` | \"\"}`]: {\n\t\tprefixes: string[];\n\t\tisReady: () => Promise<void>;\n\t\treadyResolve: () => void;\n\t};\n\tcdn: {\n\t\turl: string;\n\t\tprefixes: string[]; // to not break older versions\n\t};\n};\nexport type SelectedAriaAttributes<T extends keyof AriaAttributes> = Pick<AriaAttributes, T> | string;\ndeclare const ACCORDION_SIZES: readonly [\n\t\"small\",\n\t\"medium\"\n];\nexport type AccordionSize = (typeof ACCORDION_SIZES)[number];\n/** @deprecated */\nexport type AccordionUpdateEvent = {\n\topen: boolean;\n};\nexport type AccordionUpdateEventDetail = AccordionUpdateEvent;\nexport type AccordionTag = HeadingTag;\ndeclare const BANNER_STATES: readonly [\n\t\"info\",\n\t\"warning\",\n\t\"error\",\n\t\"neutral\"\n];\nexport type BannerState = typeof BANNER_STATES[number];\ndeclare const BANNER_WIDTHS: readonly [\n\t\"extended\",\n\t\"basic\",\n\t\"fluid\"\n];\n/** @deprecated */\nexport type BannerWidth = typeof BANNER_WIDTHS[number];\nexport type ButtonIcon = LinkButtonIconName;\ndeclare const GROUP_DIRECTIONS: readonly [\n\t\"row\",\n\t\"column\"\n];\nexport type GroupDirection = (typeof GROUP_DIRECTIONS)[number];\nexport type ButtonGroupDirection = GroupDirection;\nexport type ButtonPureType = ButtonType;\nexport type ButtonPureIcon = LinkButtonIconName;\nexport type ButtonPureAriaAttribute = ButtonAriaAttribute;\nexport type ButtonPureAlignLabel = AlignLabel;\nexport type ButtonPureWeight = TypographyTextWeight;\nexport type ButtonPureSize = TextSize;\nexport type ButtonTileAriaAttribute = ButtonAriaAttribute;\nexport type ButtonTileIcon = LinkButtonIconName;\nexport type ButtonTileType = ButtonType;\nexport type ButtonTileAspectRatio = TileAspectRatio;\nexport type ButtonTileSize = TileSize;\nexport type ButtonTileBackground = TileBackground;\nexport type ButtonTileWeight = TileWeight;\nexport type ButtonTileAlign = TileAlign;\ndeclare const CAROUSEL_WIDTHS: readonly [\n\t\"basic\",\n\t\"extended\"\n];\nexport type CarouselWidth = (typeof CAROUSEL_WIDTHS)[number];\ndeclare const CAROUSEL_ALIGN_HEADERS: readonly [\n\t\"start\",\n\t\"center\",\n\t\"left\"\n];\nexport type CarouselAlignHeader = (typeof CAROUSEL_ALIGN_HEADERS)[number];\nexport type CarouselHeadingSize = Extract<HeadingSize, \"x-large\" | \"xx-large\">;\ndeclare const CAROUSEL_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type CarouselAriaAttribute = (typeof CAROUSEL_ARIA_ATTRIBUTES)[number];\nexport type CarouselInternationalization = Partial<Record<\"prev\" | \"next\" | \"first\" | \"last\" | \"slideLabel\" | \"slide\", string>> | string;\n/** @deprecated */\nexport type CarouselUpdateEvent = {\n\tactiveIndex: number;\n\tpreviousIndex: number;\n};\nexport type CarouselUpdateEventDetail = CarouselUpdateEvent;\nexport type CheckboxWrapperState = FormState;\ndeclare const CONTENT_WRAPPER_BACKGROUND_COLORS: readonly [\n\t\"transparent\",\n\t\"default\"\n];\nexport type ContentWrapperBackgroundColor = typeof CONTENT_WRAPPER_BACKGROUND_COLORS[number];\ndeclare const CONTENT_WRAPPER_WIDTHS: readonly [\n\t\"narrow\",\n\t\"basic\",\n\t\"extended\",\n\t\"fluid\",\n\t\"full\"\n];\nexport type ContentWrapperWidth = typeof CONTENT_WRAPPER_WIDTHS[number];\nexport type CrestTarget = LinkTarget;\nexport type CrestAriaAttribute = LinkAriaAttribute;\ndeclare const DISPLAY_TAGS: readonly [\n\t\"h1\",\n\t\"h2\",\n\t\"h3\",\n\t\"h4\",\n\t\"h5\",\n\t\"h6\"\n];\nexport type DisplayTag = (typeof DISPLAY_TAGS)[number];\ndeclare const DISPLAY_SIZES: readonly [\n\t\"small\",\n\t\"medium\",\n\t\"large\",\n\t\"inherit\"\n];\nexport type DisplaySize = (typeof DISPLAY_SIZES)[number];\ndeclare const DISPLAY_COLORS: readonly [\n\t\"primary\",\n\t\"inherit\"\n];\nexport type DisplayColor = (typeof DISPLAY_COLORS)[number];\nexport type DisplayAlign = TypographyAlign;\ndeclare const DIVIDER_COLORS: readonly [\n\t\"contrast-low\",\n\t\"contrast-medium\",\n\t\"contrast-high\",\n\t\"neutral-contrast-high\",\n\t\"neutral-contrast-medium\",\n\t\"neutral-contrast-low\"\n];\nexport type DividerColor = typeof DIVIDER_COLORS[number];\ndeclare const DIVIDER_DIRECTIONS: readonly [\n\t\"vertical\",\n\t\"horizontal\"\n];\nexport type DividerDirection = typeof DIVIDER_DIRECTIONS[number];\nexport type DividerOrientation = DividerDirection;\ndeclare const FIELDSET_LABEL_SIZES: readonly [\n\t\"small\",\n\t\"medium\"\n];\nexport type FieldsetLabelSize = (typeof FIELDSET_LABEL_SIZES)[number];\nexport type FieldsetState = FormState;\nexport type FieldsetWrapperLabelSize = FieldsetLabelSize;\nexport type FieldsetWrapperState = FieldsetState;\nexport type FlexInline = boolean;\ndeclare const FLEX_WRAPS: readonly [\n\t\"nowrap\",\n\t\"wrap\",\n\t\"wrap-reverse\"\n];\nexport type FlexWrap = typeof FLEX_WRAPS[number];\ndeclare const FLEX_DIRECTIONS: readonly [\n\t\"row\",\n\t\"row-reverse\",\n\t\"column\",\n\t\"column-reverse\"\n];\nexport type FlexDirection = typeof FLEX_DIRECTIONS[number];\ndeclare const FLEX_JUSTIFY_CONTENTS: readonly [\n\t\"flex-start\",\n\t\"flex-end\",\n\t\"center\",\n\t\"space-between\",\n\t\"space-around\",\n\t\"space-evenly\"\n];\nexport type FlexJustifyContent = typeof FLEX_JUSTIFY_CONTENTS[number];\ndeclare const FLEX_ALIGN_ITEMS: readonly [\n\t\"stretch\",\n\t\"flex-start\",\n\t\"flex-end\",\n\t\"center\",\n\t\"baseline\"\n];\nexport type FlexAlignItems = typeof FLEX_ALIGN_ITEMS[number];\ndeclare const FLEX_ALIGN_CONTENTS: readonly [\n\t\"stretch\",\n\t\"flex-start\",\n\t\"flex-end\",\n\t\"center\",\n\t\"space-between\",\n\t\"space-around\",\n\t\"space-evenly\"\n];\nexport type FlexAlignContent = typeof FLEX_ALIGN_CONTENTS[number];\ndeclare const FLEX_ITEM_WIDTHS: readonly [\n\t\"auto\",\n\t\"one-quarter\",\n\t\"one-third\",\n\t\"half\",\n\t\"two-thirds\",\n\t\"three-quarters\",\n\t\"full\"\n];\nexport type FlexItemWidth = typeof FLEX_ITEM_WIDTHS[number];\ndeclare const FLEX_ITEM_OFFSETS: readonly [\n\t\"none\",\n\t\"one-quarter\",\n\t\"one-third\",\n\t\"half\",\n\t\"two-thirds\",\n\t\"three-quarters\"\n];\nexport type FlexItemOffset = typeof FLEX_ITEM_OFFSETS[number];\ndeclare const FLEX_ITEM_ALIGN_SELFS: readonly [\n\t\"auto\",\n\t\"flex-start\",\n\t\"flex-end\",\n\t\"center\",\n\t\"baseline\",\n\t\"stretch\"\n];\nexport type FlexItemAlignSelf = typeof FLEX_ITEM_ALIGN_SELFS[number];\ndeclare const FLEX_ITEM_GROWS: readonly [\n\t0,\n\t1\n];\nexport type FlexItemGrow = typeof FLEX_ITEM_GROWS[number];\ndeclare const FLEX_ITEM_SHRINKS: readonly [\n\t0,\n\t1\n];\nexport type FlexItemShrink = typeof FLEX_ITEM_SHRINKS[number];\ndeclare const FLEX_ITEM_FLEXS: readonly [\n\t\"initial\",\n\t\"auto\",\n\t\"none\",\n\t\"equal\"\n];\nexport type FlexItemFlex = typeof FLEX_ITEM_FLEXS[number];\ndeclare const FLYOUT_POSITIONS: readonly [\n\t\"start\",\n\t\"end\",\n\t\"left\",\n\t\"right\"\n];\nexport type FlyoutPosition = (typeof FLYOUT_POSITIONS)[number];\ndeclare const FLYOUT_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type FlyoutAriaAttribute = (typeof FLYOUT_ARIA_ATTRIBUTES)[number];\ndeclare const FLYOUT_NAVIGATION_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type FlyoutNavigationAriaAttribute = (typeof FLYOUT_NAVIGATION_ARIA_ATTRIBUTES)[number];\nexport type FlyoutNavigationUpdate = {\n\tactiveIdentifier: string;\n};\n/** @deprecated */\nexport type FlyoutNavigationUpdateEvent = FlyoutNavigationUpdate;\nexport type FlyoutNavigationUpdateEventDetail = FlyoutNavigationUpdateEvent;\ndeclare const GRID_DIRECTIONS: readonly [\n\t\"row\",\n\t\"row-reverse\",\n\t\"column\",\n\t\"column-reverse\"\n];\nexport type GridDirection = typeof GRID_DIRECTIONS[number];\ndeclare const GRID_WRAPS: readonly [\n\t\"nowrap\",\n\t\"wrap\"\n];\nexport type GridWrap = typeof GRID_WRAPS[number];\ndeclare const GRID_GUTTERS: readonly [\n\t16,\n\t24,\n\t36\n];\nexport type GridGutter = typeof GRID_GUTTERS[number];\ndeclare const GRID_ITEM_SIZES: readonly [\n\t1,\n\t2,\n\t3,\n\t4,\n\t5,\n\t6,\n\t7,\n\t8,\n\t9,\n\t10,\n\t11,\n\t12\n];\nexport type GridItemSize = typeof GRID_ITEM_SIZES[number];\ndeclare const GRID_ITEM_OFFSETS: readonly [\n\t0,\n\t1,\n\t2,\n\t3,\n\t4,\n\t5,\n\t6,\n\t7,\n\t8,\n\t9,\n\t10,\n\t11\n];\nexport type GridItemOffset = typeof GRID_ITEM_OFFSETS[number];\ndeclare const HEADING_COLORS: readonly [\n\t\"primary\",\n\t\"inherit\"\n];\nexport type HeadingColor = (typeof HEADING_COLORS)[number];\nexport type HeadingAlign = TypographyAlign;\ndeclare const HEADLINE_VARIANTS: readonly [\n\t\"large-title\",\n\t\"headline-1\",\n\t\"headline-2\",\n\t\"headline-3\",\n\t\"headline-4\",\n\t\"headline-5\"\n];\nexport type HeadlineVariantType = (typeof HEADLINE_VARIANTS)[number];\nexport type HeadlineVariantCustom = Exclude<BreakpointCustomizable<TextSize>, TextSize>;\nexport type HeadlineVariant = HeadlineVariantType | HeadlineVariantCustom | Extract<TextSize, \"inherit\">;\ndeclare const HEADLINE_TAGS: readonly [\n\t\"h1\",\n\t\"h2\",\n\t\"h3\",\n\t\"h4\",\n\t\"h5\",\n\t\"h6\"\n];\nexport type HeadlineTag = (typeof HEADLINE_TAGS)[number];\ndeclare const HEADLINE_COLORS: readonly [\n\t\"primary\",\n\t\"default\",\n\t\"inherit\"\n];\nexport type HeadlineColor = (typeof HEADLINE_COLORS)[number];\nexport type HeadlineAlign = TypographyAlign;\ndeclare const ICON_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type IconAriaAttribute = (typeof ICON_ARIA_ATTRIBUTES)[number];\nexport type IconSize = TextSize;\ndeclare const ICON_COLORS: readonly [\n\t\"primary\",\n\t\"contrast-low\",\n\t\"contrast-medium\",\n\t\"contrast-high\",\n\t\"notification-success\",\n\t\"notification-warning\",\n\t\"notification-error\",\n\t\"notification-info\",\n\t\"inherit\",\n\t\"brand\",\n\t\"default\",\n\t\"neutral-contrast-low\",\n\t\"neutral-contrast-medium\",\n\t\"neutral-contrast-high\",\n\t\"notification-neutral\",\n\t\"state-disabled\"\n];\nexport type IconColor = (typeof ICON_COLORS)[number];\ndeclare const INLINE_NOTIFICATION_STATES: readonly [\n\t\"success\",\n\t\"info\",\n\t\"warning\",\n\t\"error\",\n\t\"neutral\"\n];\nexport type InlineNotificationState = typeof INLINE_NOTIFICATION_STATES[number];\nexport type InlineNotificationActionIcon = IconName;\nexport type LinkIcon = LinkButtonIconName;\nexport type LinkPureIcon = LinkButtonIconName;\nexport type LinkPureAriaAttribute = LinkAriaAttribute;\nexport type LinkPureAlignLabel = AlignLabel;\nexport type LinkPureWeight = TypographyTextWeight;\nexport type LinkPureSize = TextSize;\nexport type LinkPureTarget = LinkTarget;\nexport type LinkSocialIcon = Extract<IconName, \"logo-facebook\" | \"logo-google\" | \"logo-instagram\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-twitter\" | \"logo-wechat\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-youtube\" | \"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-hatena\" | \"logo-kaixin\" | \"logo-kakaotalk\" | \"logo-naver\" | \"logo-qq-share\" | \"logo-qq\" | \"logo-reddit\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tiktok\" | \"logo-tumblr\" | \"logo-viber\" | \"logo-vk\" | \"logo-weibo\" | \"logo-yahoo\" | \"logo-youku\">;\nexport type LinkSocialTarget = LinkTarget;\nexport type LinkTileTarget = LinkTarget;\nexport type LinkTileAriaAttribute = LinkAriaAttribute;\nexport type LinkTileAspectRatio = TileAspectRatio;\nexport type LinkTileSize = TileSize;\nexport type LinkTileBackground = TileBackground;\nexport type LinkTileAlign = TileAlign;\ndeclare const LINK_TILE_WEIGHTS: readonly [\n\t\"regular\",\n\t\"semi-bold\",\n\t\"semibold\"\n];\nexport type LinkTileWeight = (typeof LINK_TILE_WEIGHTS)[number];\ndeclare const LINK_TILE_MODEL_SIGNATURE_MODELS: readonly [\n\t\"718\",\n\t\"911\",\n\t\"boxster\",\n\t\"cayenne\",\n\t\"cayman\",\n\t\"macan\",\n\t\"panamera\",\n\t\"taycan\",\n\t\"turbo-s\",\n\t\"turbo\"\n];\nexport type LinkTileModelSignatureModel = (typeof LINK_TILE_MODEL_SIGNATURE_MODELS)[number];\ndeclare const LINK_TILE_MODEL_SIGNATURE_HEADING_TAGS: readonly [\n\t\"h2\",\n\t\"h3\",\n\t\"h4\",\n\t\"h5\",\n\t\"h6\"\n];\nexport type LinkTileModelSignatureHeadingTag = (typeof LINK_TILE_MODEL_SIGNATURE_HEADING_TAGS)[number];\nexport type LinkTileModelSignatureWeight = TileWeight;\nexport type LinkTileModelSignatureAspectRatio = TileAspectRatio;\nexport type LinkTileModelSignatureLinkDirection = GroupDirection;\nexport type LinkTileProductTarget = LinkTarget;\n/** @deprecated */\nexport type LinkTileProductLikeEvent = {\n\tliked: boolean;\n};\nexport type LinkTileProductLikeEventDetail = LinkTileProductLikeEvent;\ndeclare const TILE_PRODUCT_ASPECT_RATIOS: readonly [\n\t\"3:4\",\n\t\"9:16\"\n];\nexport type LinkTileProductAspectRatio = Extract<TileAspectRatio, (typeof TILE_PRODUCT_ASPECT_RATIOS)[number]>;\ndeclare const MODEL_SIGNATURES_MANIFEST: {\n\t\"718\": string;\n\t\"911\": string;\n\tboxster: string;\n\tcayenne: string;\n\tcayman: string;\n\tmacan: string;\n\tpanamera: string;\n\ttaycan: string;\n\t\"turbo-s\": string;\n\tturbo: string;\n};\ndeclare const MARQUE_VARIANTS: readonly [\n\t\"75-years\",\n\t\"default\"\n];\nexport type MarqueVariant = (typeof MARQUE_VARIANTS)[number];\nexport type MarqueTarget = LinkTarget;\nexport type MarqueAriaAttribute = LinkAriaAttribute;\ndeclare const MARQUE_SIZES: readonly [\n\t\"responsive\",\n\t\"small\",\n\t\"medium\"\n];\nexport type MarqueSize = typeof MARQUE_SIZES[number];\ndeclare const BACKDROPS: readonly [\n\t\"blur\",\n\t\"shading\"\n];\nexport type Backdrop = (typeof BACKDROPS)[number];\ndeclare const MODAL_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type ModalAriaAttribute = (typeof MODAL_ARIA_ATTRIBUTES)[number];\nexport type ModalBackdrop = Backdrop;\ndeclare const MODEL_SIGNATURE_SIZES: readonly [\n\t\"small\",\n\t\"inherit\"\n];\nexport type ModelSignatureSize = (typeof MODEL_SIGNATURE_SIZES)[number];\nexport type ModelSignatureModel = keyof typeof MODEL_SIGNATURES_MANIFEST;\ndeclare const MODEL_SIGNATURE_COLORS: readonly [\n\t\"primary\",\n\t\"contrast-low\",\n\t\"contrast-medium\",\n\t\"contrast-high\",\n\t\"inherit\"\n];\nexport type ModelSignatureColor = (typeof MODEL_SIGNATURE_COLORS)[number];\nexport type MultiSelectState = FormState;\nexport type MultiSelectDropdownDirection = SelectComponentsDropdownDirection;\n/** @deprecated */\nexport type MultiSelectUpdateEvent = {\n\tname: string;\n\tvalue: string[];\n};\nexport type MultiSelectUpdateEventDetail = MultiSelectUpdateEvent;\ndeclare const PAGINATION_NUMBER_OF_PAGE_LINKS: readonly [\n\t5,\n\t7\n];\n/** @deprecated */\nexport type PaginationMaxNumberOfPageLinks = (typeof PAGINATION_NUMBER_OF_PAGE_LINKS)[number];\n/** @deprecated */\nexport type PaginationUpdateEvent = {\n\tpage: number;\n\tpreviousPage: number;\n};\nexport type PaginationUpdateEventDetail = PaginationUpdateEvent;\nexport type PaginationInternationalization = Partial<Record<\"root\" | \"prev\" | \"next\" | \"page\", string>> | string;\ndeclare const PIN_CODE_TYPES: readonly [\n\t\"number\",\n\t\"password\"\n];\nexport type PinCodeType = (typeof PIN_CODE_TYPES)[number];\ndeclare const PIN_CODE_LENGTHS: readonly [\n\t1,\n\t2,\n\t3,\n\t4,\n\t5,\n\t6\n];\nexport type PinCodeLength = (typeof PIN_CODE_LENGTHS)[number];\n/** @deprecated */\nexport type PinCodeUpdateEvent = {\n\tvalue: string;\n\tisComplete: boolean;\n};\nexport type PinCodeUpdateEventDetail = PinCodeUpdateEvent;\nexport type PinCodeState = FormState;\ndeclare const POPOVER_DIRECTIONS: readonly [\n\t\"top\",\n\t\"right\",\n\t\"bottom\",\n\t\"left\"\n];\nexport type PopoverDirection = (typeof POPOVER_DIRECTIONS)[number];\ndeclare const POPOVER_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type PopoverAriaAttribute = (typeof POPOVER_ARIA_ATTRIBUTES)[number];\nexport type RadioButtonWrapperState = FormState;\ndeclare const SEGMENTED_CONTROL_BACKGROUND_COLORS: readonly [\n\t\"background-surface\",\n\t\"background-default\"\n];\nexport type SegmentedControlBackgroundColor = (typeof SEGMENTED_CONTROL_BACKGROUND_COLORS)[number];\n/** @deprecated */\nexport type SegmentedControlUpdateEvent = {\n\tvalue: string | number;\n};\nexport type SegmentedControlUpdateEventDetail = SegmentedControlUpdateEvent;\ndeclare const SEGMENTED_CONTROL_COLUMNS: (string | number)[];\nexport type SegmentedControlColumns = (typeof SEGMENTED_CONTROL_COLUMNS)[number];\nexport type SegmentedControlItemIcon = LinkButtonIconName;\nexport type SelectState = FormState;\nexport type SelectDropdownDirection = SelectComponentsDropdownDirection;\nexport type SelectUpdateEventDetail = {\n\tname: string;\n\tvalue: string;\n};\ndeclare const DROPDOWN_DIRECTIONS: readonly [\n\t\"down\",\n\t\"up\",\n\t\"auto\"\n];\nexport type SelectWrapperDropdownDirection = (typeof DROPDOWN_DIRECTIONS)[number];\nexport type SelectWrapperState = FormState;\ndeclare const SPINNER_SIZES: readonly [\n\t\"small\",\n\t\"medium\",\n\t\"large\",\n\t\"inherit\"\n];\nexport type SpinnerSize = typeof SPINNER_SIZES[number];\ndeclare const SPINNER_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type SpinnerAriaAttribute = typeof SPINNER_ARIA_ATTRIBUTES[number];\ndeclare const STEPPER_HORIZONTAL_SIZES: readonly [\n\t\"small\",\n\t\"medium\"\n];\nexport type StepperHorizontalSize = (typeof STEPPER_HORIZONTAL_SIZES)[number];\n/** @deprecated */\nexport type StepperHorizontalUpdateEvent = {\n\tactiveStepIndex: number;\n};\nexport type StepperHorizontalUpdateEventDetail = StepperHorizontalUpdateEvent;\ndeclare const STEPPER_ITEM_STATES: readonly [\n\t\"current\",\n\t\"complete\",\n\t\"warning\"\n];\nexport type StepperHorizontalItemState = (typeof STEPPER_ITEM_STATES)[number];\nexport type SwitchAlignLabel = AlignLabel;\n/** @deprecated */\nexport type SwitchUpdateEvent = {\n\tchecked: boolean;\n};\nexport type SwitchUpdateEventDetail = SwitchUpdateEvent;\nexport type Direction = \"asc\" | \"desc\";\nexport type TableHeadCellSort = {\n\tid: string;\n\tactive?: boolean;\n\tdirection?: Direction;\n};\n/** @deprecated */\nexport type TableUpdateEvent = TableHeadCellSort;\nexport type TableUpdateEventDetail = TableUpdateEvent;\ndeclare const TABS_BAR_SIZES: readonly [\n\t\"small\",\n\t\"medium\"\n];\nexport type TabsBarSize = (typeof TABS_BAR_SIZES)[number];\ndeclare const TABS_BAR_WEIGHTS: readonly [\n\t\"regular\",\n\t\"semi-bold\",\n\t\"semibold\"\n];\nexport type TabsBarWeight = (typeof TABS_BAR_WEIGHTS)[number];\n/** @deprecated */\nexport type TabsBarUpdateEvent = {\n\tactiveTabIndex: number;\n};\nexport type TabsBarUpdateEventDetail = TabsBarUpdateEvent;\n/** @deprecated */\nexport type TabsBarGradientColorScheme = ScrollerGradientColorScheme;\nexport type TabsBarGradientColor = ScrollerGradientColor;\nexport type TabsSize = TabsBarSize;\nexport type TabsWeight = TabsBarWeight;\n/** @deprecated */\nexport type TabsGradientColorScheme = TabsBarGradientColorScheme;\nexport type TabsGradientColor = TabsBarGradientColor;\n/** @deprecated */\nexport type TabsUpdateEvent = TabsBarUpdateEvent;\nexport type TabsUpdateEventDetail = TabsUpdateEvent;\ndeclare const TAG_DISMISSIBLE_COLORS: readonly [\n\t\"background-base\",\n\t\"background-surface\",\n\t\"background-default\"\n];\nexport type TagDismissibleColor = typeof TAG_DISMISSIBLE_COLORS[number];\ndeclare const TAG_DISMISSIBLE_ARIA_ATTRIBUTES: readonly [\n\t\"aria-label\"\n];\nexport type TagDismissibleAriaAttribute = typeof TAG_DISMISSIBLE_ARIA_ATTRIBUTES[number];\nexport type TagIcon = IconName;\ndeclare const TAG_COLORS: readonly [\n\t\"background-base\",\n\t\"background-surface\",\n\t\"background-default\",\n\t\"primary\",\n\t\"notification-info-soft\",\n\t\"notification-warning-soft\",\n\t\"notification-success-soft\",\n\t\"notification-error-soft\",\n\t\"neutral-contrast-high\",\n\t\"notification-neutral\",\n\t\"notification-warning\",\n\t\"notification-success\",\n\t\"notification-error\"\n];\nexport type TagColor = (typeof TAG_COLORS)[number];\ndeclare const TEXT_TAGS: readonly [\n\t\"p\",\n\t\"span\",\n\t\"div\",\n\t\"address\",\n\t\"blockquote\",\n\t\"figcaption\",\n\t\"cite\",\n\t\"time\",\n\t\"legend\"\n];\nexport type TextTag = (typeof TEXT_TAGS)[number];\nexport type TextAlign = TypographyAlign;\nexport type TextColor = TypographyTextColor;\nexport type TextWeight = TypographyTextWeight;\ndeclare const UNIT_POSITIONS: readonly [\n\t\"prefix\",\n\t\"suffix\"\n];\nexport type TextFieldWrapperUnitPosition = (typeof UNIT_POSITIONS)[number];\nexport type TextFieldWrapperActionIcon = Extract<IconName, \"locate\">;\nexport type TextFieldWrapperState = FormState;\ndeclare const LIST_TYPES: readonly [\n\t\"unordered\",\n\t\"ordered\"\n];\n/** @deprecated */\nexport type TextListListType = typeof LIST_TYPES[number];\ndeclare const ORDER_TYPES: readonly [\n\t\"numbered\",\n\t\"alphabetically\"\n];\n/** @deprecated */\nexport type TextListOrderType = typeof ORDER_TYPES[number];\ndeclare const TEXT_LIST_TYPES: readonly [\n\t\"unordered\",\n\t\"numbered\",\n\t\"alphabetically\"\n];\nexport type TextListType = typeof TEXT_LIST_TYPES[number];\nexport type TextareaWrapperState = FormState;\ndeclare const TOAST_STATES: readonly [\n\t\"info\",\n\t\"success\",\n\t\"neutral\"\n];\nexport type ToastState = typeof TOAST_STATES[number];\nexport type ToastMessage = {\n\ttext: string;\n\tstate?: ToastState;\n};\ndeclare const WORDMARK_SIZES: readonly [\n\t\"small\",\n\t\"inherit\"\n];\nexport type WordmarkSize = (typeof WORDMARK_SIZES)[number];\nexport type WordmarkTarget = LinkTarget;\nexport type WordmarkAriaAttribute = LinkAriaAttribute;\n"]}